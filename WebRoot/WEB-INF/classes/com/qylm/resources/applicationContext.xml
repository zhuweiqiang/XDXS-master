<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd" >
	<!-- JDBC配置文件读取 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:com/qylm/resources/jdbc.properties</value>
			</list>
		</property>
	</bean>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--连接池中保留的最小连接数。-->
        <property name="minPoolSize" value="5"/>
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="300"/>
        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="10"/>
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="60"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="5"/>
        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
       		属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
       		如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements" value="0"/>
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60"/>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="30"/>
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
		       保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
		       获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure" value="false"/>
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
		      时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
		      等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="false"/>
		<!--连接池用完时客户调用getConnection()后等待获取连接的时间，单位：毫秒。超时后会抛出-->
 		<!--SQLEXCEPTION，如果设置0，则无限等待。Default:0-->
 		<property name="checkoutTimeout" value="20000"/>
	</bean>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com/qylm/entity" />
		<property name="hibernateProperties">
			<map>
				<entry key="hibernate.dialect" value="${hibernate.dialect}" />
				<entry key="hibernate.show_sql" value="${hibernate.show_sql}" />
				<entry key="hibernate.hbm2ddl.auto" value="${hibernate.hbm2ddl.auto}" />
				<entry key="hibernate.format_sql" value="${hibernate.format_sql}" />
				<entry key="hibernate.jdbc.batch_size" value="50" />
				<entry key="hibernate.jdbc.fetch_size" value="50" />
				<entry key="hibernate.default_batch_fetch_size" value="16" />
				<!--entry key="hibernate.bytecode.use_reflection_optimizer" value="true" /-->
				<entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}"/>
				<entry key="hibernate.current_session_context_class" value="${hibernate.current_session_context_class}"/>
				<!-- 二级缓存 -->
				<entry key="hibernate.cache.use_query_cache" value="true" /> 
				<entry key="hibernate.cache.use_second_level_cache" value="true" /> 
				<entry key="hibernate.cache.provider_class" value="${hibernate.cache.provider_class}" /> 
				<entry key="hibernate.cache.region.factory_class" value="${hibernate.cache.region.factory_class}" />
				<entry key="hibernate.cache.configurationResourceName" value="${hibernate.cache.configurationResourceName}" /> 
				<entry key="hibernate.cache.provider_configuration_file_resource_path" value="${hibernate.cache.provider_configuration_file_resource_path}" /> 
				<entry key="hibernate.cache.use_structured_entries" value="true" />
			</map>
		</property>
	</bean>
	
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="transactonInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="txManager"/>
		<property name="transactionAttributeSource" ref="attrSource"/>
	</bean>
	
	<!-- 几种事务属性：
	 PROPAGATION_REQUIRED支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
	 PROPAGATION_SUPPORTS支持当前事务，如果当前没有事务，就以非事务方式执行。
	 PROPAGATION_MANDATORY支持当前事务，如果当前没有事务，就抛出异常。
	 PROPAGATION_REQUIRES_NEW新建事务，如果当前存在事务，把当前事务挂起。
	 PROPAGATION_NOT_SUPPORTED以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
	 PROPAGATION_NEVER以非事务方式执行，如果当前存在事务，则抛出异常。
	 PROPAGATION_NESTED如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED 类似的操作 
	 -->
	
	<bean id="attrSource"
		class="org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource">
		<property name="properties">
			<props>
				<prop key="get*">
					PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED,readOnly</prop>
				<prop key="load*">
					PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED,readOnly</prop>
				<prop key="find*">
					PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED,readOnly</prop>
				<prop key="save*">
					PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED,-Exception</prop>
				<prop key="update*">
					PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED,-Exception</prop>
				<prop key="bulk*">
					PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED,-Exception</prop>
				<prop key="delete*">
					PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED,-Exception</prop>
			</props>
		</property>
	</bean>
	<bean id="autoproxy"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<idref bean="transactonInterceptor" />
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
	</bean> 
	
	<bean id="applicationContextHelper" class="com.qylm.spring.application.ApplicationContextHelper" scope="singleton"/>
	
	<context:component-scan base-package="com.qylm.dao">
		<context:include-filter type="regex" expression="com\.qylm\.dao\..*" />
		<context:exclude-filter type="regex" expression="com\.qylm\.dao\.Generic*" />
	</context:component-scan>
	
	<context:component-scan base-package="com.qylm.service">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	
	<context:component-scan base-package="com.qylm.logic">
		<context:include-filter type="regex" expression="com\.qylm\.logic\..*\.*Logic" />
		<context:include-filter type="regex" expression="com\.qylm\.logic\.*Logic" />
	</context:component-scan>
	
	<bean id="addressFinder" class="com.qylm.common.AddressFinder"/>
</beans>